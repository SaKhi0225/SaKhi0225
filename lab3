# создаём класс Account (Счёт)
class Account:
    def __init__(self, owner, balance):
        # когда создаётся счёт, мы указываем владельца и сумму на счёте
        self.owner = owner
        self.balance = balance
2.
    def deposit(self, amount):
        # метод для пополнения баланса
        self.balance += amount
        print("Баланс пополнен на", amount)

    def withdraw(self, amount):
        # метод для снятия денег
        if amount > self.balance:
            print("Недостаточно денег на счёте!")
        else:
            self.balance -= amount
            print("Вы сняли", amount)

    def show_balance(self):
        # метод, чтобы показать текущий баланс
        print("Ваш текущий баланс:", self.balance)

# создаём объект (счёт)
my_account = Account("Аружан", 10000)

# смотрим баланс
my_account.show_balance()

# пополняем
my_account.deposit(5000)
my_account.show_balance()

# пробуем снять слишком много
my_account.withdraw(20000)
my_account.show_balance()

# снимаем нормальную сумму
my_account.withdraw(3000)
my_account.show_balance()






def is_prime(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

# список чисел
numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

# используем filter и lambda для выбора только простых чисел
prime_numbers = list(filter(lambda x: is_prime(x), numbers))

# выводим результат
print("Простые числа из списка:", prime_numbers)







class Shape:
    def area(self):
        # базовый метод, возвращает 0
        return 0

# класс Квадрат (Square), наследуется от Shape
class Square(Shape):
    def __init__(self, length):
        # сохраняем длину стороны квадрата
        self.length = length

    def area(self):
        # площадь квадрата = сторона * сторона
        return self.length * self.length

# создаём объект класса Shape
shape = Shape()
print("Площадь фигуры (Shape):", shape.area())  # выводит 0

# создаём объект класса Square
square = Square(5)
print("Площадь квадрата (Square):", square.area())  # выводит 25







# базовый класс - Фигура
class Shape:
    def area(self):
        # базовая реализация — просто 0
        return 0

# класс Прямоугольник, наследуется от Shape
class Rectangle(Shape):
    def __init__(self, length, width):
        # сохраняем длину и ширину
        self.length = length
        self.width = width

    def area(self):
        # площадь прямоугольника = длина * ширина
        return self.length * self.width

# создаём объект прямоугольника с длиной 4 и шириной 6
rectangle = Rectangle(4, 6)

# выводим площадь
print("Площадь прямоугольника:", rectangle.area())







import math  # модуль нужен для вычисления расстояния

class Point:
    def __init__(self, x, y):
        # создаём точку с координатами x и y
        self.x = x
        self.y = y

    def show(self):
        # показываем координаты
        print("Точка находится в координатах:", (self.x, self.y))

    def move(self, new_x, new_y):
        # меняем координаты точки
        self.x = new_x
        self.y = new_y

    def dist(self, other):
        # считаем расстояние до другой точки
        dx = self.x - other.x
        dy = self.y - other.y
        return math.sqrt(dx**2 + dy**2)

# создаём две точки
point1 = Point(2, 3)
point2 = Point(5, 7)

# показываем координаты
point1.show()
point2.show()

# считаем расстояние между ними
distance = point1.dist(point2)
print("Расстояние между точками:", distance)

# перемещаем первую точку
point1.move(10, 10)
point1.show()









class Account:
    def __init__(self, owner, balance):
        # сохраняем имя владельца и начальный баланс
        self.owner = owner
        self.balance = balance

    def deposit(self, amount):
        # пополнение счёта
        self.balance += amount
        print(f"{amount}₸ успешно добавлены. Новый баланс: {self.balance}₸")

    def withdraw(self, amount):
        # проверка: хватает ли денег
        if amount > self.balance:
            print("❌ Недостаточно средств. Снятие отменено.")
        else:
            self.balance -= amount
            print(f"{amount}₸ снято. Остаток: {self.balance}₸")

    def show_balance(self):
        # вывод текущего баланса
        print(f"Баланс владельца {self.owner}: {self.balance}₸")

# создаём счёт
my_account = Account("Аружан", 15000)

# выводим баланс
my_account.show_balance()

# делаем пополнение и снятие
my_account.deposit(5000)
my_account.withdraw(7000)
my_account.withdraw(20000)  # пробуем снять больше, чем есть

# снова смотрим баланс
my_account.show_balance()










def is_prime(n):
    # простое число — это больше 1 и делится только на 1 и само себя
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def filter_prime(numbers):
    # используем list comprehension для фильтрации
    return [num for num in numbers if is_prime(num)]

# пример использования
input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13]
prime_list = filter_prime(input_list)

print("Простые числа:", prime_list)








from itertools import permutations

def print_permutations(s):
    # itertools.permutations возвращает все перестановки строки s
    perms = permutations(s)
    
    # выводим каждую перестановку в виде строки
    for p in perms:
        print(''.join(p))

# пример использования
user_input = input("Введите строку: ")
print("Все перестановки строки:")
print_permutations(user_input)








def reverse_words(sentence):
    # разбиваем строку на слова по пробелам
    words = sentence.split()
    
    # переворачиваем список слов
    reversed_words = words[::-1]
    
    # соединяем обратно в строку через пробел
    reversed_sentence = ' '.join(reversed_words)
    
    return reversed_sentence

# пример использования
user_input = input("Введите предложение: ")
result = reverse_words(user_input)
print("Перевернутое предложение:", result)










def has_33(nums):
    # Проходим по списку до предпоследнего элемента
    for i in range(len(nums) - 1):
        # Если текущий и следующий элементы равны 3
        if nums[i] == 3 and nums[i+1] == 3:
            return True
    return False

# Примеры вызова функции
print(has_33([1, 3, 3]))      # True
print(has_33([1, 3, 1, 3]))   # False
print(has_33([3, 1, 3]))      # False






def spy_game(nums):
    code = [0, 0, 7]  # последовательность, которую ищем
    code_index = 0    # индекс текущего числа, которое ищем

    for num in nums:
        if num == code[code_index]:
            code_index += 1
            if code_index == len(code):  # если нашли всю последовательность
                return True
    return False

# Примеры
print(spy_game([1, 2, 4, 0, 0, 7, 5]))  # True
print(spy_game([1, 0, 2, 4, 0, 5, 7]))  # True
print(spy_game([1, 7, 2, 0, 4, 5, 0]))  # False







import math  # импортируем модуль с числом пи

def sphere_volume(radius):
    volume = (4/3) * math.pi * (radius ** 3)  # формула объёма сферы
    return volume

# Пример использования
r = float(input("Введите радиус сферы: "))
print("Объём сферы:", sphere_volume(r))






def unique_elements(lst):
    unique = []  # создаём пустой список для уникальных элементов
    for item in lst:
        if item not in unique:
            unique.append(item)  # добавляем только если ещё нет в списке
    return unique

# Пример использования
numbers = [1, 2, 2, 3, 4, 4, 5, 1, 6]
print("Уникальные элементы:", unique_elements(numbers))







def is_palindrome(text):
    # Убираем пробелы и приводим к нижнему регистру для честной проверки
    clean_text = text.replace(" ", "").lower()
    # Проверяем, равна ли строка сама себе в обратном порядке
    return clean_text == clean_text[::-1]

# Пример использования
user_input = input("Введите слово или фразу: ")
if is_palindrome(user_input):
    print("Это палиндром!")
else:
    print("Это не палиндром.")








def histogram(numbers):
    for num in numbers:
        print('*' * num)  # печатаем строку из num звездочек

# Пример использования
histogram([4, 9, 7])









import random  # импортируем модуль для случайных чисел

def guess_the_number():
    secret_number = random.randint(1, 20)  # загадали число от 1 до 20
    print("Hello! What is your name?")
    name = input()
    print(f"Well, {name}, I am thinking of a number between 1 and 20.")
    
    guesses_taken = 0
    
    while True:
        print("Take a guess.")
        try:
            guess = int(input())
        except ValueError:
            print("Пожалуйста, вводи числа!")
            continue
        
        guesses_taken += 1
        
        if guess < secret_number:
            print("Your guess is too low.")
        elif guess > secret_number:
            print("Your guess is too high.")
        else:
            print(f"Good job, {name}! You guessed my number in {guesses_taken} guesses!")
            break

# Запуск игры
guess_the_number()










def is_good_movie(movie):
    return movie['imdb'] > 5.5

# Пример использования
movie_example = {
    "name": "Usual Suspects",
    "imdb": 7.0,
    "category": "Thriller"
}

print(is_good_movie(movie_example))  # True








def good_movies(movies):
    result = []
    for movie in movies:
        if movie['imdb'] > 5.5:
            result.append(movie)
    return result

# Пример использования
movies = [
    {"name": "Usual Suspects", "imdb": 7.0, "category": "Thriller"},
    {"name": "Hitman", "imdb": 6.3, "category": "Action"},
    {"name": "Bride Wars", "imdb": 5.4, "category": "Romance"},
]

print(good_movies(movies))








def movies_by_category(movies, category):
    result = []
    for movie in movies:
        if movie['category'].lower() == category.lower():
            result.append(movie)
    return result

# Пример использования
movies = [
    {"name": "Usual Suspects", "imdb": 7.0, "category": "Thriller"},
    {"name": "Hitman", "imdb": 6.3, "category": "Action"},
    {"name": "Bride Wars", "imdb": 5.4, "category": "Romance"},
    {"name": "Love", "imdb": 6.0, "category": "Romance"},
]

print(movies_by_category(movies, "Romance"))








def average_imdb(movies):
    if len(movies) == 0:  # проверка, что список не пустой
        return 0
    total = 0
    for movie in movies:
        total += movie['imdb']  # суммируем рейтинги
    return total / len(movies)  # делим на количество фильмов

# Пример использования
movies = [
    {"name": "Usual Suspects", "imdb": 7.0, "category": "Thriller"},
    {"name": "Hitman", "imdb": 6.3, "category": "Action"},
    {"name": "Bride Wars", "imdb": 5.4, "category": "Romance"},
]

print("Средний рейтинг IMDb:", average_imdb(movies))






















