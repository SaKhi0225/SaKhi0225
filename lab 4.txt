Python Iterators

#1
mytuple = ("apple","banana", "cherry")
myit = iter(mytuple)'
print(next(myit))
print(next(myit))
print(next(myit))

#2
mystr = "banana"
myit = iter(mystr)
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))

#3
  mytuple = ("apple", "banana", "cherry")
for x in mytuple:
  print(x)

#4
mystr = "banana"
for x in mystr:
  print(x)

#5
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))

#6 
  class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)

Python Polymorphism

1)
x = "Hello World!"
print(len(x))

2)
mytuple = ("apple", "banana", "cherry")
print(len(mytuple))

3)
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

print(len(thisdict))

4)
class Car:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Drive!")

class Boat:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Sail!")

class Plane:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Fly!")

car1 = Car("Ford", "Mustang")       #Create a Car class
boat1 = Boat("Ibiza", "Touring 20") #Create a Boat class
plane1 = Plane("Boeing", "747")     #Create a Plane class

for x in (car1, boat1, plane1):
  x.move()
5) 
class Vehicle:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Move!")

class Car(Vehicle):
  pass

class Boat(Vehicle):
  def move(self):
    print("Sail!")

class Plane(Vehicle):
  def move(self):
    print("Fly!")

car1 = Car("Ford", "Mustang") #Create a Car object
boat1 = Boat("Ibiza", "Touring 20") #Create a Boat object
plane1 = Plane("Boeing", "747") #Create a Plane object

for x in (car1, boat1, plane1):
  print(x.brand)
  print(x.model)
  x.move()

Python Scope
1)
def myfunc():
  x = 300
  print(x)

myfunc()

2)
def myfunc():
  x = 300
  def myinnerfunc():
    print(x)
  myinnerfunc()

myfunc()
3)
x = 300
def myfunc():
  print(x)

myfunc()
print(x)
4)
x = 300

def myfunc():
  x = 200
  print(x)

myfunc()
print(x)

5)
def myfunc():
  global x
  x = 300

myfunc()
print(x)

6)
x = 300

def myfunc():
  global x
  x = 200

myfunc()

print(x)

Python Modules

1)
mymodule.py

def greeting(name):
  print("Hello, " + name)

2)
import mymodule

mymodule.greeting("Jonathan")

3)
person1 = {
  "name": "John",
  "age": 36,
  "country": "Norway"
}

4)
import mymodule

a = mymodule.person1["age"]
print(a)

5) 
import platform

x = platform.system()
print(x)

6) 
import platform

x = dir(platform)
print(x)

7)
def greeting(name):
  print("Hello, " + name)

person1 = {
  "name": "John",
  "age": 36,
  "country": "Norway"
}

8)
from mymodule import person1

print (person1["age"])

Exercises
1) import mymodule
2)import mymodule as mx
3)print(dir(mymodule))
4) from mymodule import person1
Python  Datetime

1)
import datetime
x = datetime.datetime.now()
print(x)

2) 
import datetime
x = datetime.datetime.now()
print(x.year)
print(x.strftime("%A"))

3)
import datetime
x = datetime.datetime(2020, 5, 17)
print(x)

4) 
import datetime

x = datetime.datetime(2018, 6, 1)

print(x.strftime("%B"))

Python Math
1)
x = min(5, 10, 25)
y = max(5, 10, 25)

print(x)
print(y)

2)
x = abs(-7.25)

print(x)

3)
x = pow(4, 3)

print(x)

4)
import math

x = math.sqrt(64)

print(x)

5)
import math

x = math.ceil(1.4)
y = math.floor(1.4)

print(x) # returns 2
print(y) # returns 1

6)
import math

x = math.pi

print(x)

Python JSON

1)
import json

# some JSON:
x =  '{ "name":"John", "age":30, "city":"New York"}'

# parse x:
y = json.loads(x)

# the result is a Python dictionary:
print(y["age"])

2)
import json

# a Python object (dict):
x = {
  "name": "John",
  "age": 30,
  "city": "New York"
}

# convert into JSON:
y = json.dumps(x)

# the result is a JSON string:
print(y)

3)
import json

print(json.dumps({"name": "John", "age": 30}))
print(json.dumps(["apple", "bananas"]))
print(json.dumps(("apple", "bananas")))
print(json.dumps("hello"))
print(json.dumps(42))
print(json.dumps(31.76))
print(json.dumps(True))
print(json.dumps(False))
print(json.dumps(None))

4) 
import json

x = {
  "name": "John",
  "age": 30,
  "married": True,
  "divorced": False,
  "children": ("Ann","Billy"),
  "pets": None,
  "cars": [
    {"model": "BMW 230", "mpg": 27.5},
    {"model": "Ford Edge", "mpg": 24.1}
  ]
}
Python JSON parsing
print(json.dumps(x))
Python JSON parsing

import json 
with open("sample-data.json", "r") as read_file: 
    data = json.load(read_file) 
    print("Interface Status") 
    print("================================================================================") 
    print("DN                                                       Description           Speed        MTU  ") 
    print("--------------------------------------------------   --------------------      ------      ------") 
    for s in range(18): 
        for x, y in data["imdata"][s]['l1PhysIf']["attributes"].items(): 
            if x == 'dn': 
                print(y, end="                                    ") 
            if x == "mtu": 
                print(y, end="") 
            if x == "fecMode": 
                print(y, end="       ") 
        print("\n")

from datetime import datetime, timedelta 

date.md
# substract 5 days 
 
print("Current time:", datetime.now()) 
print("Five days before:", datetime.now() - timedelta(days = 5)) 
 
# yesterday, today, tomorrow 
yest = datetime.now() - timedelta(1) 
today = datetime.now() 
tom = datetime.now() + timedelta(1) 
print("Yesterday:", yest.strftime('%d-%m-%Y')) 
print("Today:", today.strftime('%d-%m-%Y')) 
print("Tomorrow:", tom.strftime('%d-%m-%Y')) 
 
# microseconds 
x = datetime.now() 
print("Microseconds:", x.replace(microsecond=0)) 
 
# date difference 
y1, m1, d1 = int(input()), int(input()), int(input()) 
y2, m2, d2 = int(input()), int(input()), int(input()) 
a = datetime(y1, m1, d1) 
b = datetime(y2, m2, d2) 
d = b - a 
print((b-a).total_seconds())
Generators.md

1) # Create a generator that generates the squares of numbers up to some number N. 
class gensquare(): 
    def iter(self): 
        self.a = 1 
        return self 
    def next(self): 
        if self.a * self.a <= n: 
            x = self.a 
            self.a += 1 
            return x**2 
        else: 
            raise StopIteration 
 
n = int(input()) 
z = gensquare() 
i = iter(z) 
for c in i: 
    print(c)

2) # Write a program using generator to print 
# the even numbers between 0 and n in comma 
# separated form where n is input from console. 
def even(): 
    for i in range(0, n+1, 2): 
        yield i 
n = int(input()) 
res = [] 
for x in even(): 
    res.append(str(x)) 
print(",". join(res))

3) # Define a function with a generator 
# which can iterate the numbers, 
# which are divisible by 3 and 4, between a given range 0 and n 
def div(): 
    for i in range(n+1): 
        if i % 3 == 0 and i % 4 == 0: 
            yield i 
n = int(input("Enter any integer: ")) 
for x in div(): 
    print(x)
4) 
def gensquares(): 
    for i in range(a, b+1): 
        yield i*i 
a = int(input("Enter starting point: ")) 
b = int(input("Enter ending point: ")) 
for x in gensquares(): 
    print(x)
5)
# Implement a generator that returns all numbers from (n) down to 0. 
def rev(): 
    for i in range(n, -1, -1): 
        yield i 
 
n = int(input("Enter any number: ")) 
for x in rev(): 
    print(x)

math.md
import math 
# DegTo Rad 
a = int(input()) 
print(a * math.pi/180) 
 
# area of trap 
h = int(input()) 
a = int(input()) 
b = int(input()) 
print((a+b)/2*h) 
 
# area of parall 
l = int(input()) 
h = int(input()) 
print(l*h) 
 
# PolygonArea 
n = int(input()) 
length = int(input()) 
p = n * length 
deg = 180/n 
tang = int(math.tan(deg)) 
apophem = length/2/tang 
area = apophem * p/2 
print(area)
